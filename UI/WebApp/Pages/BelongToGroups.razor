@* 
Copyright (c) Microsoft Corporation.
Licensed under the MIT license. 
*@

@page "/belongtogroups"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Graph
@using Microsoft.AspNetCore.Components.QuickGrid
@using System.Text.Json
@using System.Timers
@inject Microsoft.Graph.GraphServiceClient GraphServiceClient
@attribute [Authorize]

<PageTitle>Groups I'm In</PageTitle>

<h1>Groups I am a member of</h1>
<br />

@if (user == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h3>Summary </h3>
    <table class="table">
        <FluentDataGridRow TItem="string" RowType="DataGridRowType.StickyHeader" style="grid-template-columns: 50% 50%;">
            <FluentDataGridCell GridColumn="1" CellType="DataGridCellType.ColumnHeader">Property</FluentDataGridCell>
            <FluentDataGridCell GridColumn="2" CellType="DataGridCellType.ColumnHeader">Value</FluentDataGridCell>
        </FluentDataGridRow>
        <FluentDataGridRow TItem="string" style="grid-template-columns: 50% 50%;">
            <FluentDataGridCell GridColumn="1">Num Groups</FluentDataGridCell>
            <FluentDataGridCell GridColumn="2">@numGroups</FluentDataGridCell>
        </FluentDataGridRow>
        <FluentDataGridRow TItem="string" style="grid-template-columns: 50% 50%;">
            <FluentDataGridCell GridColumn="1">User query input value</FluentDataGridCell>
            <FluentDataGridCell GridColumn="2">@nameFilter</FluentDataGridCell>
        </FluentDataGridRow>
        <FluentDataGridRow TItem="string" style="grid-template-columns: 50% 50%;">
            <FluentDataGridCell GridColumn="1">Filter query (i.e. string passed to request as filter params)</FluentDataGridCell>
            <FluentDataGridCell GridColumn="2">@filterQuery</FluentDataGridCell>
        </FluentDataGridRow>
    </table>
    <br />


    <h3>Groups</h3>

    <div class="search">
        <input type="search" @bind="@nameFilter" @bind:event="oninput" @onkeyup="@HandleKeyUp" placeholder="Group display name..." class="search-box"/>
    </div>

    <table class="table">
        <FluentDataGridRow TItem="string" RowType="DataGridRowType.StickyHeader" style="grid-template-columns: 40% 30% 30%;">
            <FluentDataGridCell GridColumn="1" CellType="DataGridCellType.ColumnHeader">ID</FluentDataGridCell>
            <FluentDataGridCell GridColumn="2" CellType="DataGridCellType.ColumnHeader">Display Name</FluentDataGridCell>
            <FluentDataGridCell GridColumn="3" CellType="DataGridCellType.ColumnHeader">Group Type</FluentDataGridCell>
        </FluentDataGridRow>
        <Virtualize Context="group" ItemsProvider="@LoadGroups" @ref="@virtualizedTable">
            <FluentDataGridRow TItem="Group" style="grid-template-columns: 40% 30% 30%;">
                <FluentDataGridCell GridColumn="1"><a href=@getGroupUrl(group) target="_blank">@group.Id</a></FluentDataGridCell>
                <FluentDataGridCell GridColumn="2">@getDisplayName(group)</FluentDataGridCell>
                <FluentDataGridCell GridColumn="3">@getGroupType(group)</FluentDataGridCell>
            </FluentDataGridRow>
        </Virtualize>
    </table>
}

@code {
    User? user;
    List<string>? groups = new List<string>();
    List<Group> groupProps = new List<Group>();
    int numGroups;
    Virtualize<Group> virtualizedTable;

    private System.Timers.Timer aTimer;
    IUserTransitiveMemberOfCollectionWithReferencesPage? groupsResult = null;

    string nameFilter = string.Empty;
    string filterQuery => "$search=\"displayName:" + nameFilter + "\"";


    public EventCallback<ChangeEventArgs> OnInput;


    private static string getGroupUrl(DirectoryObject group)
    {
        return "https://portal.azure.com/#view/Microsoft_AAD_IAM/GroupDetailsMenuBlade/~/Overview/groupId/" + group.Id;
    }

    private static string getDisplayName(DirectoryObject obj)
    {
        Group group = (Group)obj;
        return group.DisplayName;
    }

    private static string getGroupType(DirectoryObject obj)
    {
        var group = (Group)obj;

        if (group.GroupTypes != null && group.GroupTypes.Contains("Unified"))
        {
            return "M365";
        } 
        else if (group.MailEnabled == null || group.MailEnabled == false)
        {
            return "Security Group";
        }
        else if (group.SecurityEnabled == null || group.SecurityEnabled == false)
        {
            return "Distribution Group";
        }
        else
        {
            return "Invalid group type";
        }
    }

    private List<Group> HandleGroupsAsDirectoryObjects(IEnumerable<DirectoryObject> groupsResponse)
    {
        var groupProperties = new List<Group>();
        var allGroups = (List<DirectoryObject>)groupsResponse;
        foreach(var item in allGroups)
        {
            if (item.ODataType == "#microsoft.graph.group")
            {
                var group = (Group)item;
                groupProperties.Add(group);
            }
            else 
            {
                groupProperties.Add(new Group());
            }
        }
        return groupProperties;
    }

    private async Task<List<Group>> GetGroupsAsync(int startIndex, int numToRetrieve)
    {
        var cachedMembers = groupProps.Count;

        if (cachedMembers == 0)
        {
            var queryOptions = new List<QueryOption>()
            {
	            new QueryOption("$count", "true")
            };

            if (nameFilter != string.Empty)
            {
                string searchQuery = $"\"displayName:{nameFilter}\"";
                queryOptions.Add(new QueryOption("$search", searchQuery));
            }
            groupsResult = await GraphServiceClient.Me.TransitiveMemberOf
                .Request( queryOptions )
                .Header("ConsistencyLevel","eventual")
                .Select("displayName,id,groupTypes")
                .OrderBy("displayName")
                .GetAsync();

            groupProps = HandleGroupsAsDirectoryObjects(groupsResult.CurrentPage);

            if (groupsResult.AdditionalData["@odata.count"] != null)
            {
                var elem = (JsonElement)groupsResult.AdditionalData["@odata.count"];
                int totalNumGroups;
                elem.TryGetInt32(out totalNumGroups);
                numGroups = totalNumGroups;
                StateHasChanged();
            }
        }

        while ((startIndex + numToRetrieve >= cachedMembers) && (groupsResult.NextPageRequest != null) && (cachedMembers <= numGroups))
        {
            groupsResult = await groupsResult.NextPageRequest.GetAsync();
            var newGroups = HandleGroupsAsDirectoryObjects(groupsResult.CurrentPage);
            groupProps.AddRange(newGroups);
            cachedMembers = groupProps.Count;
        }

        return groupProps.GetRange(startIndex, Math.Min(numToRetrieve, (numGroups - startIndex)));
    }

    private async ValueTask<ItemsProviderResult<Group>> LoadGroups(ItemsProviderRequest request)
    {
        var loadedGroups = await GetGroupsAsync(request.StartIndex, request.Count);
        return new ItemsProviderResult<Group>(loadedGroups, numGroups);

    }

    void HandleKeyUp(KeyboardEventArgs e)
    {
        // remove previous one
        aTimer.Stop();

        // new timer
        aTimer.Start();        
    }    

    private void OnUserFinish(Object source, ElapsedEventArgs e)
    {
        InvokeAsync( async () =>
        {
            groupProps = new List<Group>();
            await virtualizedTable.RefreshDataAsync();
            StateHasChanged();
        });

    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            user = await GraphServiceClient.Me.Request().GetAsync();

            aTimer = new System.Timers.Timer(1000);
            aTimer.Elapsed += OnUserFinish;
            aTimer.AutoReset = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
}
