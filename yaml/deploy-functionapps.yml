parameters:
  solutionAbbreviation: ''
  environmentAbbreviation: ''
  serviceConnection: ''
  name: ''
  location: ''
  root: ''
  tenantId: ''

steps:

- task: AzureResourceGroupDeployment@2
  displayName: 'deploy ${{ parameters.name }} data resources'
  inputs:
    azureSubscription: ${{parameters.serviceConnection}}
    resourceGroupName: ${{parameters.solutionAbbreviation}}-data-${{parameters.environmentAbbreviation}}
    location: ${{parameters.location}}
    csmFile: ${{ parameters.root }}/functions_arm_templates/${{ parameters.name }}/Infrastructure/data/template.json
    csmParametersFile: ${{ parameters.root }}/functions_arm_templates/${{ parameters.name }}/Infrastructure/data/parameters/parameters.${{parameters.environmentAbbreviation}}.json
    overrideParameters: -environmentAbbreviation "${{parameters.environmentAbbreviation}}"
                        -tenantId "${{parameters.tenantId}}"
                        -solutionAbbreviation "${{parameters.solutionAbbreviation}}"
                        -storageAccountName "$(data_storageAccountName)"
    deploymentMode: 'Incremental'

- task: AzureResourceGroupDeployment@2
  displayName: 'deploy ${{ parameters.name }} compute resources'
  inputs:
    azureSubscription: ${{parameters.serviceConnection}}
    resourceGroupName: ${{parameters.solutionAbbreviation}}-compute-${{parameters.environmentAbbreviation}}
    csmFile: ${{ parameters.root }}/functions_arm_templates/${{ parameters.name }}/Infrastructure/compute/template.json
    csmParametersFile: ${{ parameters.root }}/functions_arm_templates/${{ parameters.name }}/Infrastructure/compute/parameters/parameters.${{parameters.environmentAbbreviation}}.json
    overrideParameters: -environmentAbbreviation "${{parameters.environmentAbbreviation}}"
                        -tenantId "${{parameters.tenantId}}"
                        -location "${{parameters.location}}"
                        -solutionAbbreviation "${{parameters.solutionAbbreviation}}"
                        -containerBaseUrl "$(data_containerEndPoint)functions/${{ parameters.name }}/Infrastructure/compute/"
                        -containerSasToken "$(data_containerSASToken)"
                        -storageAccountName "$(data_storageAccountName)"
    deploymentMode: 'Incremental'

- powershell: Start-Sleep -Seconds 60
  displayName: 'Wait for ARM resources'

- task: AzureFunctionApp@1
  displayName: 'deploy ${{ parameters.name }} function app'
  inputs:
    appType: 'functionapp'
    azureSubscription: ${{parameters.serviceConnection}}
    appName: '${{ parameters.solutionAbbreviation }}-compute-${{ parameters.environmentAbbreviation }}-${{ parameters.name }}'
    Package: '${{ parameters.root }}/function_packages/${{ parameters.name }}.zip'
    deploymentMethod: 'runFromPackage'
    resourceGroupName: '${{ parameters.solutionAbbreviation }}-compute-${{ parameters.environmentAbbreviation }}'

# This sets the "Enforce Scale Out Limit" in the function app configuration. This is apparently the only way to do it automatically. ARM templates don't support it.
# https://docs.microsoft.com/en-us/azure/azure-functions/event-driven-scaling#limit-scale-out
- task: AzureCLI@2
  displayName: limit paralellism for ${{ parameters.name }}
  inputs:
    azureSubscription: ${{ parameters.serviceConnection }}
    scriptType: 'ps'
    scriptLocation: 'inlineScript'
    inlineScript: 'az resource update --resource-type Microsoft.Web/sites -g ${{ parameters.solutionAbbreviation }}-compute-${{ parameters.environmentAbbreviation }} -n ${{ parameters.solutionAbbreviation }}-compute-${{ parameters.environmentAbbreviation }}-${{ parameters.name }}/config/web --set properties.functionAppScaleLimit=1'

- task: AzurePowerShell@4
  displayName: 'Azure PowerShell script: PostDeployment ${{ parameters.name }}'
  inputs:
    azureSubscription: ${{parameters.serviceConnection}}
    scriptType: inlineScript
    inline: |
      cd\
      cd ${{parameters.root}}
      $fileExists = Test-Path -Path 'functions_scripts/${{ parameters.name }}/scripts/PostDeploymentScript.ps1' -PathType Leaf
      if ($fileExists) {
        cd 'functions_scripts/${{ parameters.name }}/scripts'
        . ./PostDeploymentScript.ps1
        PostDeploymentScript -SolutionAbbreviation ${{parameters.solutionAbbreviation}} -EnvironmentAbbreviation ${{parameters.environmentAbbreviation}} -FunctionName ${{parameters.name}}
      }
    azurePowerShellVersion: LatestVersion
  name: postDeploymentScript_${{ parameters.name }}