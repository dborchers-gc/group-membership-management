parameters:
  solutionAbbreviation: ''
  environmentAbbreviation: ''
  serviceConnection: ''
  location: ''
  root: ''
  tenantId: ''

steps:
  - task: AzureResourceManagerTemplateDeployment@3
    displayName: 'Deploy WebApp compute resources'
    inputs:
      azureResourceManagerConnection: ${{parameters.serviceConnection}}
      subscriptionId: ${{parameters.subscriptionId}}
      resourceGroupName: ${{parameters.solutionAbbreviation}}-compute-${{parameters.environmentAbbreviation}}
      location: ${{parameters.location}}
      csmFile: ${{ parameters.root }}/webapp_arm_templates/GroupTableManager/Infrastructure/compute/template.bicep
      csmParametersFile: ${{ parameters.root }}/webapp_arm_templates/GroupTableManager/Infrastructure/compute/parameters/parameters.${{parameters.environmentAbbreviation}}.json
      overrideParameters: -environmentAbbreviation "${{parameters.environmentAbbreviation}}"
                          -tenantId "${{parameters.tenantId}}"
                          -location "${{parameters.location}}"
                          -solutionAbbreviation "${{parameters.solutionAbbreviation}}"
      deploymentMode: 'Incremental'
      deploymentOutputs: deploymentOutputs

  - task: AzureFunctionApp@1
    displayName: 'Deploy WebApp function app (staging)'
    inputs:
      appType: 'functionapp'
      azureSubscription: ${{parameters.serviceConnection}}
      appName: '${{ parameters.solutionAbbreviation }}-compute-${{ parameters.environmentAbbreviation }}-${{ parameters.name }}'
      Package: '${{ parameters.root }}/function_packages/groupTableManager.zip'
      deploymentMethod: 'runFromPackage'
      deployToSlotOrASE: true
      slotName: 'staging'
      resourceGroupName: '${{ parameters.solutionAbbreviation }}-compute-${{ parameters.environmentAbbreviation }}'

  - task: AzureAppServiceManage@0
    displayName: 'swap WebApp function app deployment slots'
    inputs:
      azureSubscription: ${{parameters.serviceConnection}}
      webAppName: '${{ parameters.solutionAbbreviation }}-compute-${{ parameters.environmentAbbreviation }}-${{ parameters.name }}'
      resourceGroupName: ${{parameters.solutionAbbreviation}}-compute-${{parameters.environmentAbbreviation}}
      sourceSlot: staging
      swapWithProduction: true
    condition: notIn('${{ parameters.environmentAbbreviation }}', 'ua', 'prodv2')
  
  # This sets the "Enforce Scale Out Limit" in the function app configuration. This is apparently the only way to do it automatically. ARM templates don't support it.
  # https://docs.microsoft.com/en-us/azure/azure-functions/event-driven-scaling#limit-scale-out
  - task: AzureCLI@2
    displayName: limit paralellism for ${{ parameters.name }}
    inputs:
      azureSubscription: ${{ parameters.serviceConnection }}
      scriptType: 'pscore'
      scriptLocation: 'inlineScript'
      inlineScript: 'az resource update --resource-type Microsoft.Web/sites -g ${{ parameters.solutionAbbreviation }}-compute-${{ parameters.environmentAbbreviation }} -n ${{ parameters.solutionAbbreviation }}-compute-${{ parameters.environmentAbbreviation }}-${{ parameters.name }}/config/web --set properties.functionAppScaleLimit=1'

  - task: AzurePowerShell@4
    displayName: 'Azure PowerShell script: PostDeployment WebApp backend'
    inputs:
      azureSubscription: ${{parameters.serviceConnection}}
      scriptType: inlineScript
      inline: |
        cd\
        cd ${{parameters.root}}
        $fileExists = Test-Path -Path 'functions_scripts/${{ parameters.name }}/scripts/PostDeploymentScript.ps1' -PathType Leaf
        if ($fileExists) {
          cd 'functions_scripts/${{ parameters.name }}/scripts'
          . ./PostDeploymentScript.ps1
          PostDeploymentScript -SolutionAbbreviation ${{parameters.solutionAbbreviation}} -EnvironmentAbbreviation ${{parameters.environmentAbbreviation}} -FunctionName ${{parameters.name}}
        }
      azurePowerShellVersion: LatestVersion
    name: postDeploymentScript_groupTableManager

  - task: PowerShell@2
    name: 'SetDeploymentOutputVariables'
    displayName: 'Set Deployment Output Variables'
    inputs:
      targetType: inline
      script: |
        $armOutputObj = '$(deploymentOutputs)' | ConvertFrom-Json
        $armOutputObj.PSObject.Properties | ForEach-Object {
          $keyname = $_.Name
          $value = $_.Value.value

          # Creates a standard pipeline variable
          Write-Output "##vso[task.setvariable variable=$keyName;issecret=true]$value"

          # Display keys in pipeline
          Write-Output "output variable: $keyName"
        }
      pwsh: true

  - task: AzureStaticWebApp@0
    name: DeployStaticWebApp
    displayName: Deploy Static Web App
    inputs:
      app_location: 'WebApp'
      output_location: 'wwwroot'
      cwd: '${{ parameters.root }}/webapp_package'
      azure_static_web_apps_api_token: $(deployment_token) # captured from deploymentOutputs